#net.laraifox.collision {
	- class AABBCollider [GameObject] : ICollidable {
		- constructor AABBCollider(Transform3D, GameObject)
		- function collides(AABBCollider) : CollisionData @Override
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(CapsuleCollider) : CollisionData @Override
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(ConvexMeshCollider) : CollisionData @Override
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(OBBCollider) : CollisionData @Override
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(PlainCollider) : CollisionData @Override
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(SphereCollider) : CollisionData @Override
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(Vector3f) : CollisionData @Override
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData @Override
	}
	- class CapsuleCollider [GameObject] : ICollidable {
		- constructor CapsuleCollider(Transform3D, GameObject)
		- function collides(AABBCollider) : CollisionData @Override
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(CapsuleCollider) : CollisionData @Override
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(ConvexMeshCollider) : CollisionData @Override
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(OBBCollider) : CollisionData @Override
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(PlainCollider) : CollisionData @Override
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(SphereCollider) : CollisionData @Override
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(Vector3f) : CollisionData @Override
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData @Override
	}
	- class ConvexMeshCollider [GameObject] : ICollidable {
		- constructor ConvexMeshCollider(Transform3D, GameObject)
		- function collides(AABBCollider) : CollisionData @Override
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(CapsuleCollider) : CollisionData @Override
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(ConvexMeshCollider) : CollisionData @Override
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(OBBCollider) : CollisionData @Override
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(PlainCollider) : CollisionData @Override
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(SphereCollider) : CollisionData @Override
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(Vector3f) : CollisionData @Override
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData @Override
	}
	- class OBBCollider [GameObject] : ICollidable {
		- constructor OBBCollider(Transform3D, GameObject)
		- function collides(AABBCollider) : CollisionData @Override
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(CapsuleCollider) : CollisionData @Override
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(ConvexMeshCollider) : CollisionData @Override
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(OBBCollider) : CollisionData @Override
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(PlainCollider) : CollisionData @Override
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(SphereCollider) : CollisionData @Override
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(Vector3f) : CollisionData @Override
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData @Override
	}
	- class PlainCollider [GameObject] : ICollidable {
		- constructor PlainCollider(Transform3D, GameObject)
		- function collides(AABBCollider) : CollisionData @Override
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(CapsuleCollider) : CollisionData @Override
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(ConvexMeshCollider) : CollisionData @Override
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(OBBCollider) : CollisionData @Override
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(PlainCollider) : CollisionData @Override
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(SphereCollider) : CollisionData @Override
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(Vector3f) : CollisionData @Override
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData @Override
	}
	- class SphereCollider [GameObject] : ICollidable {
		- constructor SphereCollider(Transform3D, GameObject)
		- function collides(AABBCollider) : CollisionData @Override
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(CapsuleCollider) : CollisionData @Override
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(ConvexMeshCollider) : CollisionData @Override
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(OBBCollider) : CollisionData @Override
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(PlainCollider) : CollisionData @Override
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(SphereCollider) : CollisionData @Override
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData @Override
			+ func collides(Vector3f) : CollisionData @Override
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData @Override
	}
	- class CollisionData {
		- var colliding : boolean
		- var collisionPoint : float
		- var minTranslationX : float
		- var minTranslationY : float
		- var minTranslationZ : float
		- var minTranslation2D : Vector2f
		- var minTranslation3D : Vector3f
	}
	- class Quadtree {
		- var level : int
		- var bounds : AABBCollider
		- var objects : ArrayList<ICollidable>
		- var nodes : Quadtree
		- var maxObjects : int
		- var maxLevels : int
		- function clear() : void
		- function insert(ICollidable) : void
		- function retrieve(ICollidable) : ArrayList<ICollidable>
		- function split() : void
		- function getIndex() : int
	}
	- class Octree {
		- var level : int
		- var bounds : AABBCollider
		- var objects : ArrayList<ICollidable>
		- var nodes : Octree
		- var maxObjects : int
		- var maxLevels : int
		- function clear() : void
		- function insert(ICollidable) : void
		- function retrieve(ICollidable) : ArrayList<ICollidable>
		- function split() : void
		- function getIndex() : int
	}
__________________________________________
	
	- class Collision2D {
		- function contains(IGeometricObject2D, IGeometricObject2D) : CollisionData2D 
			@Overload(IGeometricObject2D, Transform2D, IGeometricObject2D, Transform2D)
		- function intersects(IGeometricObject2D, IGeometricObject2D) : CollisionData2D
			@Overload(IGeometricObject2D, Transform2D, IGeometricObject2D, Transform2D)
	}
	- class CollisionData2D {
		// All variables are private and only accessible by getters or the constructor.
		- var minimumTranslationVector : Vector2f
		- var minimumTranslationX : float
		- var minimumTranslationY : float
		- var intersects : boolean
		- var willIntersect : boolean
		- var wasIntersecting : boolean
	}
	- class QuadTree {
		- var level : int
		- var bounds : AARectangle
		- var objects : ArrayList<IGeometricObject>
		- var nodes : QuadTree
		- var maxObjects : int
		- var maxLevels : int
		- function clear() : void
		- function insert(IGeometricObject) : void
		- function retrieve(IGeometricObject) : ArrayList<IGeometricObject>
		- function split() : void
		- function getIndex() : int
	}
}
#net.laraifox.core {
	- class GameObject {
		- var transform : Transform3D
		- var childComponents : ArrayList<GameObject>
		- function addComponent(GameObject) : void
		- function update() : void
		- function render() : void
	}
}
#net.laraifox.geometry {
	- class GeomProjection1D {
		- constructor GeomProjection1D(IGeometricObject)
		- var min : float
		- var max : float
	}
	- class Shape : IGeometricObject {
		- var transform : Transform2D
		- var vertices : Vertex2D[]
		- function calculateNormals() : void
		- function transform(Transform2D) : void
		- function translate(Vector2f) : void
		- function rotate(float) : void
		- function scale(float) : void
		- function scale(Vector2f) : void
		- function render() : void
		- function getPoints() : Vector3f[] @Override
		- function getNormals() : Vector3f[] @Override
		- function getX() : float @Override
		- function getY() : float @Override
		- function getZ() : float @Override
		- function getMinX() : float @Override
		- function getMinY() : float @Override
		- function getMinZ() : float @Override
		- function getMaxX() : float @Override
		- function getMaxY() : float @Override
		- function getMaxZ() : float @Override
		- function getWidth() : float @Override
		- function getHeight() : float @Override
		- function getLength() : float @Override
	}
	- class Quadrilateral [Shape] {
		- function render() : void @Override
		- function getNormals() : Vector2f[] @Override
	}
	- class Rectangle [Quadrilateral] {
		- function render() : void @Override
		- function getNormals() : Vector2f[] @Override
	}
	- class AARectangle [Rectangle] {
		- function getPoints() : Vector3f[] @Override
		- function getNormals() : Vector3f[] @Override
		- function getX() : float @Override
		- function getY() : float @Override
		- function getZ() : float @Override
		- function getMinX() : float @Override
		- function getMinY() : float @Override
		- function getMinZ() : float @Override
		- function getMaxX() : float @Override
		- function getMaxY() : float @Override
		- function getMaxZ() : float @Override
		- function getWidth() : float @Override
		- function getHeight() : float @Override
		- function getLength() : float @Override
	}
	- class Circle : IGeometricObject {
		- var transform : Transform2D
		- var maxVertices : int
		- function transform(Transform2D) : void
		- function translate(Vector2f) : void
		- function rotate(float) : void
		- function scale(float) : void
		- function scale(Vector2f) : void
		- function render() : void
		- function getPoints() : Vector3f[] @Override
		- function getNormals() : Vector3f[] @Override
		- function getX() : float @Override
		- function getY() : float @Override
		- function getZ() : float @Override
		- function getMinX() : float @Override
		- function getMinY() : float @Override
		- function getMinZ() : float @Override
		- function getMaxX() : float @Override
		- function getMaxY() : float @Override
		- function getMaxZ() : float @Override
		- function getWidth() : float @Override
		- function getHeight() : float @Override
		- function getLength() : float @Override
	}
	- class LineSegment : IGeometricObject {
		- var transform : Transform2D
		- var vertices : Vertex2D[]
		- function transform(Transform2D) : void
		- function translate(Vector2f) : void
		- function rotate(float) : void
		- function scale(float) : void
		- function scale(Vector2f) : void
		- function render() : void
		- function getPoints() : Vector3f[] @Override
		- function getNormals() : Vector3f[] @Override
		- function getX() : float @Override
		- function getY() : float @Override
		- function getZ() : float @Override
		- function getMinX() : float @Override
		- function getMinY() : float @Override
		- function getMinZ() : float @Override
		- function getMaxX() : float @Override
		- function getMaxY() : float @Override
		- function getMaxZ() : float @Override
		- function getWidth() : float @Override
		- function getHeight() : float @Override
		- function getLength() : float @Override
	}
	- class Point : IGeometricObject {
		- var transform : Transform3D
		- function transform(Transform3D) : void
		- function translate(Vector2f) : void
		- function rotate(float) : void
		- function scale(float) : void
		- function scale(Vector2f) : void
		- function render() : void
		- function getPoints() : Vector3f[] @Override
		- function getNormals() : Vector3f[] @Override
		- function getX() : float @Override
		- function getY() : float @Override
		- function getZ() : float @Override
		- function getMinX() : float @Override
		- function getMinY() : float @Override
		- function getMinZ() : float @Override
		- function getMaxX() : float @Override
		- function getMaxY() : float @Override
		- function getMaxZ() : float @Override
		- function getWidth() : float @Override
		- function getHeight() : float @Override
		- function getLength() : float @Override
	}
}
#net.laraifox.interfaces {
	- interface ICollidable {
		- function collides(AABBCollider) : CollisionData
			+ func collides(AABBCollider, Vector3f, Vector3f) : CollisionData
			+ func collides(CapsuleCollider) : CollisionData
			+ func collides(CapsuleCollider, Vector3f, Vector3f) : CollisionData
			+ func collides(ConvexMeshCollider) : CollisionData
			+ func collides(ConvexMeshCollider, Vector3f, Vector3f) : CollisionData
			+ func collides(OBBCollider) : CollisionData
			+ func collides(OBBCollider, Vector3f, Vector3f) : CollisionData
			+ func collides(PlainCollider) : CollisionData
			+ func collides(PlainCollider, Vector3f, Vector3f) : CollisionData
			+ func collides(SphereCollider) : CollisionData
			+ func collides(SphereCollider, Vector3f, Vector3f) : CollisionData
			+ func collides(Vector3f) : CollisionData
			+ func collides(Vector3f, Vector3f, Vector3f) : CollisionData
	}
	- interface IGeometricObject {
		- function getPoints() : Vector3f[]
		- function getNormals() : Vector3f[]
		- function getX() : float
		- function getY() : float
		- function getZ() : float
		- function getMinX() : float
		- function getMinY() : float
		- function getMinZ() : float
		- function getMaxX() : float
		- function getMaxY() : float
		- function getMaxZ() : float
		- function getWidth() : float
		- function getHeight() : float
		- function getLength() : float
	}
}
#net.laraifox.math {
	- class Vector3f {
		- variable x : float
		- variable y : float
		- variable z : float
		
		- constructor Vector3f()
		- constructor Vector3f(float)
		- constructor Vector3f(float, float, float)
		- constructor Vector3f(Vector3f)
	
		- function add(Vector3f) : Vector3f
			- func add(float, float, float) : Vector3f
		- function subtract(Vector3f) : Vector3f
			- func subtract(float, float, float) : Vector3f
		- function multiply(Vector3f) : Vector3f
			- func multiply(float, float, float) : Vector3f
		- function divide(Vector3f) : Vector3f
			- func divide(float, float, float) : Vector3f
		
		- function abs() : Vector3f
		- function ceil() : Vector3f
		- function clamp(Vector3f, Vector3f) : Vector3f
			- func clamp(float, float, float, float, float, float) : Vector3f
			- func clamp(float, float) : Vector3f
		- function clampLength(float) : Vector3f
		- function cross(Vector3f) : Vector3f
		- function floor() : Vector3f
		- function lerp(Vector3f, float) : Vector3f
		- function max(Vector3f) : Vector3f
			- func max(float, float, float) : Vector3f
			- func max(float) : Vector3f
		- function min(Vector3f) : Vector3f
			- func min(float, float, float) : Vector3f
			- func min(float) : Vector3f
		- function moveTowards(Vector3f, float) : Vector3f
		- function negate() : Vector3f
		- function nlerp(Vector3f, float) : Vector3f
		- function normalize() : Vector3f
		- function orthoNormalize(Vector3f) : Vector3f
		- function projectToVector(Vector3f) : Vector3f
		- function projectToPlane(Vector3f) : Vector3f
		- function reflect(Vector3f) : Vector3f
		- function rotate(Vector3f, float) : Vector3f
			- func rotate(float, float, float, float) : Vector3f
			- func rotate(Quaternion) : Vector3f
		- function rotateTowards(Vector3f, float) : Vector3f
		- function round() : Vector3f
		- function scale(float) : Vector3f
		- function slerp(Vector3f, float) : Vector3f
		- function transform(Matrix4f) : Vector3f
		
		- function angle(Vector3f) : float
		- function distance(Vector3f) : float
		- function distanceSq(Vector3f) : float
		- function dot(Vector3f) : float
		- function length() : float
		- function lengthSq() : float
		
		- function equals(Object) : boolean @Override
		
		- function isEqual(Vector3f) : boolean
		- function isNormalized() : boolean
		- function isZero() : boolean
		
		- function toArray() : float[]
		- function toString() : String @Override
		
		- function get() : Vector3f
			- func get(int) : float
		- function getX() : float
		- function getY() : float
		- function getZ() : float
		- function getXY() : Vector2f
		- function getXZ() : Vector2f
		- function getYX() : Vector2f
		- function getYZ() : Vector2f
		- function getZX() : Vector2f
		- function getZY() : Vector2f
		- function getXYZ() : Vector3f
		- function getXZY() : Vector3f
		- function getYXZ() : Vector3f
		- function getYZX() : Vector3f
		- function getZXY() : Vector3f
		- function getZYX() : Vector3f
		
		- function set(Vector3f) : Vector3f
			- func set(int, float) : Vector3f
		- function setLength(float) : Vector3f
		- function setX(float) : Vector3f
		- function setY(float) : Vector3f
		- function setZ(float) : Vector3f
		- function setXY(Vector2f) : Vector3f
		- function setXZ(Vector2f) : Vector3f
		- function setYX(Vector2f) : Vector3f
		- function setYZ(Vector2f) : Vector3f
		- function setZX(Vector2f) : Vector3f
		- function setZY(Vector2f) : Vector3f
		- function setXYZ(Vector3f) : Vector3f
		- function setXZY(Vector3f) : Vector3f
		- function setYXZ(Vector3f) : Vector3f
		- function setYZX(Vector3f) : Vector3f
		- function setZXY(Vector3f) : Vector3f
		- function setZYX(Vector3f) : Vector3f
		
		- static function add(Vector3f, Vector3f) : Vector3f
			- static func add(Vector3f, float, float, float) : Vector3f
		- static function subtract(Vector3f, Vector3f) : Vector3f
			- static func subtract(Vector3f, float, float, float) : Vector3f
		- static function multiply(Vector3f, Vector3f) : Vector3f
			- static func multiply(Vector3f, float, float, float) : Vector3f
		- static function divide(Vector3f, Vector3f) : Vector3f
			- static func divide(Vector3f, float, float, float) : Vector3f
		
		- static function abs(Vector3f) : Vector3f
		- static function ceil(Vector3f) : Vector3f
		- static function clamp(Vector3f, Vector3f, Vector3f) : Vector3f
			- static func clamp(Vector3f, float, float, float, float, float, float) : Vector3f
			- static func clamp(Vector3f, float, float) : Vector3f
		- static function clampLength(Vector3f, float) : Vector3f
		- static function cross(Vector3f, Vector3f) : Vector3f
		- static function floor(Vector3f) : Vector3f
		- static function lerp(Vector3f, Vector3f, float) : Vector3f
		- static function max(Vector3f, Vector3f) : Vector3f
			- static func max(Vector3f, float, float, float) : Vector3f
			- static func max(Vector3f, float) : Vector3f
		- static function min(Vector3f, Vector3f) : Vector3f
			- static func min(Vector3f, float, float, float) : Vector3f
			- static func min(Vector3f, float) : Vector3f
		- static function moveTowards(Vector3f, Vector3f, float) : Vector3f
		- static function negate(Vector3f) : Vector3f
		- static function nlerp(Vector3f, Vector3f, float) : Vector3f
		- static function normalize(Vector3f) : Vector3f
		- static function orthoNormalize(Vector3f, Vector3f) : Vector3f
		- static function projectToVector(Vector3f, Vector3f) : Vector3f
		- static function projectToPlane(Vector3f, Vector3f) : Vector3f
		- static function reflect(Vector3f, Vector3f) : Vector3f
		- static function rotate(Vector3f, Vector3f, float) : Vector3f
			- static func rotate(Vector3f, float, float, float, float) : Vector3f
			- static func rotate(Vector3f, Quaternion) : Vector3f
		- static function rotateTowards(Vector3f, Vector3f, float) : Vector3f
		- static function round(Vector3f) : Vector3f
		- static function scale(Vector3f, float) : Vector3f
		- static function slerp(Vector3f, Vector3f, float) : Vector3f
		- static function transform(Vector3f, Matrix4f) : Vector3f
		
		- static function zero() : Vector3f
		- static function one() : Vector3f
		- static function left() : Vector3f
			- static func left(float) : Vector3f
		- static function right() : Vector3f
			- static func right(float) : Vector3f
		- static function down() : Vector3f
			- static func down(float) : Vector3f
		- static function up() : Vector3f
			- static func up(float) : Vector3f
		- static function back() : Vector3f
			- static func back(float) : Vector3f
		- static function forward() : Vector3f
			- static func forward(float) : Vector3f
	}
	- class Vector4f {
		- variable x : float
		- variable y : float
		- variable z : float
		- variable w : float
		
		- constructor Vector4f()
		- constructor Vector4f(float)
		- constructor Vector4f(float, float, float, float)
		- constructor Vector4f(Vector3f, float)
		- constructor Vector4f(Vector4f)
		
		- function add(Vector4f) : Vector4f
			- func add(float, float, float, float) : Vector4f
		- function subtract(Vector4f) : Vector4f
			- func subtract(float, float, float, float) : Vector4f
		- function multiply(Vector4f) : Vector4f
			- func multiply(float, float, float, float) : Vector4f
		- function divide(Vector4f) : Vector4f
			- func divide(float, float, float, float) : Vector4f
		
		- function abs() : Vector4f
		- function ceil() : Vector4f
		- function clamp(Vector4f, Vector4f) : Vector4f
			- func clamp(float, float, float, float, float, float, float, float) : Vector4f
			- func clamp(float, float) : Vector4f
		- function clampLength(float) : Vector4f
		- function floor() : Vector4f
		- function lerp(Vector4f, float) : Vector4f
		- function max(Vector4f) : Vector4f
			- func max(float, float, float) : Vector4f
			- func max(float) : Vector4f
		- function min(Vector4f) : Vector4f
			- func min(float, float, float) : Vector4f
			- func min(float) : Vector4f
		- function moveTowards(Vector4f, float) : Vector4f
		- function negate() : Vector4f
		- function nlerp(Vector4f, float) : Vector4f
		- function normalize() : Vector4f
		- function orthoNormalize(Vector4f) : Vector4f
		- function projectToVector(Vector4f) : Vector4f
		- function projectToPlane(Vector4f) : Vector4f
		- function round() : Vector4f
		- function scale(float) : Vector4f
		- function slerp(Vector4f, float) : Vector4f
		
		- function distance(Vector4f) : float
		- function distanceSq(Vector4f) : float
		- function dot(Vector4f) : float
		- function length() : float
		- function lengthSq() : float
		
		- function equals(Object) : boolean @Override
		
		- function isEqual(Vector4f) : boolean
		- function isNormalized() : boolean
		- function isZero() : boolean
		
		- function toArray() : float[]
		- function toString() : String @Override
		
		- static function add(Vector4f, Vector4f) : Vector4f
			- static func add(Vector4f, float, float, float) : Vector4f
		- static function subtract(Vector4f, Vector4f) : Vector4f
			- static func subtract(Vector4f, float, float, float) : Vector4f
		- static function multiply(Vector4f, Vector4f) : Vector4f
			- static func multiply(Vector4f, float, float, float) : Vector4f
		- static function divide(Vector4f, Vector4f) : Vector4f
			- static func divide(Vector4f, float, float, float) : Vector4f
		
		- static function abs(Vector4f) : Vector4f
		- static function ceil(Vector4f) : Vector4f
		- static function clamp(Vector4f, Vector4f, Vector4f) : Vector4f
			- static func clamp(Vector4f, float, float, float, float, float, float) : Vector4f
			- static func clamp(Vector4f, float, float) : Vector4f
		- static function clampLength(Vector4f, float) : Vector4f
		- static function floor(Vector4f) : Vector4f
		- static function lerp(Vector4f, Vector4f, float) : Vector4f
		- static function max(Vector4f, Vector4f) : Vector4f
			- static func max(Vector4f, float, float, float) : Vector4f
			- static func max(Vector4f, float) : Vector4f
		- static function min(Vector4f, Vector4f) : Vector4f
			- static func min(Vector4f, float, float, float) : Vector4f
			- static func min(Vector4f, float) : Vector4f
		- static function moveTowards(Vector4f, Vector4f, float) : Vector4f
		- static function negate(Vector4f) : Vector4f
		- static function nlerp(Vector4f, Vector4f, float) : Vector4f
		- static function normalize(Vector4f) : Vector4f
		- static function orthoNormalize(Vector4f, Vector4f) : Vector4f
		- static function projectToVector(Vector4f, Vector4f) : Vector4f
		- static function projectToPlane(Vector4f, Vector4f) : Vector4f
		- static function round(Vector4f) : Vector4f
		- static function scale(Vector4f, float) : Vector4f
		- static function slerp(Vector4f, Vector4f, float) : Vector4f
			
		- static function zero() : Vector4f
		- static function one() : Vector4f
	}
}